name: CI

on:
  push:
    branches:
      - main

jobs:
  editorconfig-checker:
    name: EditorConfig Checker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: editorconfig-checker/action-editorconfig-checker@main
      - run: editorconfig-checker

  markdown-lint:
    name: Markdown Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          if ls **/*.md > /dev/null 2>&1; then
            npx markdown-cli '**/*.md';
          else
            echo "No markdown files found.";
          fi

  flake8:
    name: Flake8 Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install Flake8
        run: pip install flake8
      - name: Run Flake8
        uses: suo/flake8-github-action@releases/v1
        with:
          checkName: 'flake8'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  unittest:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
      - name: Install Dependencies
        run: pip install -r src/requirements.txt
      - name: Run Unit Tests
        run: python3 -m unittest src/app_test.py

  secrets-detection:
    name: Secrets Detection (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  database-test:
    name: Database Migrations and Tests
    needs: [unittest, flake8, markdown-lint, editorconfig-checker]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: db
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: joshuaavalon/flyway-action@v3.0.0
        with:
          url: jdbc:postgresql://postgres:5432/db
          user: user
          password: password
      - run: echo 'Database migration and tests executed'

  sonarcloud:
    needs: [database-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adoptopenjdk'  # Specify distribution here
      - name: Set up SonarCloud
        uses: sonarsource/sonarcloud-github-action@v1
        with:
          organization: 'test-org1542122'
          projectKey: 'test-org1542122_classwork-1'
      - name: Run SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: sonar-scanner -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  snyk:
    name: Snyk Security Test
    needs: [database-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Dependencies
        run: pip install -r src/requirements.txt
      - name: Install Snyk
        run: npm install -g snyk
      - name: Run Snyk Security Test
        run: |
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk test

  build-docker-image:
    name: Build and Push Docker Image
    needs: [sonarcloud, snyk]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Docker Image
        run: |
          docker build -t your-username/your-image-name .
      - name: Push Docker Image
        run: |
          docker push your-username/your-image-name

